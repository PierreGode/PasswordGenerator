name: "PR Summary"

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    if: github.event_name == 'pull_request'
    name: "PR Summary by AI"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read README.md for Context
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "README<<EOF" >> "$GITHUB_OUTPUT"
          echo "$README_CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Extract Release Version from README.md
        id: extract_version
        run: |
          # Look for a line that contains "release version :" and extract the version number (case-insensitive).
          VERSION=$(grep -i "release version :" README.md | head -n 1 | sed -E 's/.*release version :[ ]*([^ ]+).*/\1/')
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Read Commit Message
        id: read_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT<<EOF" >> "$GITHUB_OUTPUT"
          echo "$COMMIT_MSG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Fetch Initial PR Comment
        id: fetch_pr_comment
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          TOKEN=${{ secrets.G_TOKEN }}
          URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          response=$(curl -s -H "Authorization: token $TOKEN" "$URL")
          initial_comment=$(echo "$response" | jq -r '.[0].body')
          echo "INITIAL_COMMENT<<EOF" >> "$GITHUB_OUTPUT"
          echo "$initial_comment" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ steps.read_readme.outputs.README }}
          COMMIT_CONTENT: ${{ steps.read_commit.outputs.COMMIT }}
          INITIAL_COMMENT: ${{ steps.fetch_pr_comment.outputs.INITIAL_COMMENT }}
          VERSION: ${{ steps.extract_version.outputs.VERSION }}
        run: |
          python - <<'EOF'
          import os
          import requests
          import json
          from datetime import datetime

          # Generate today's actual date in the desired format
          today = datetime.now().strftime("%B %d, %Y")
          version = os.environ.get('VERSION', "1.0.0")  # Default to "1.0.0" if not found

          # Load the GitHub event
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          pr_number = event.get('pull_request', {}).get('number')
          repo_full_name = event.get('repository', {}).get('full_name')
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')
          commit_content = os.environ.get('COMMIT_CONTENT')
          initial_comment = os.environ.get('INITIAL_COMMENT')

          # Get PR file diffs
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github+json',
          }
          diff_url = event.get('pull_request', {}).get('url') + "/files"
          response = requests.get(diff_url, headers=headers)
          response.raise_for_status()
          pr_files = response.json()

          diff_text = ""
          for fdata in pr_files:
              filename = fdata.get('filename')
              patch = fdata.get('patch', '')
              if patch:
                  diff_text += f"File: {filename}\n{patch}\n\n"
          if not diff_text:
              diff_text = "No significant changes detected."

          # Construct the summary prompt:
          # - The README is provided as context only (to understand the app and its purpose).
          # - The release notes must focus solely on the changes made in the PR (commits/diffs).
          summary_prompt = (
              f"Application Context (for reference only):\n{readme_content}\n\n"
              "Generate customer-friendly release notes based solely on the following commit and diff information. "
              "Do not include technical details about files or internal components. The release notes should focus on describing the changes and their impact on the application.\n\n"
              f"**Commit Message:**\n{commit_content}\n\n"
              f"**Pull Request Diff:**\n{diff_text}\n\n"
              f"**Initial PR Comment:**\n{initial_comment}\n\n"
              "Your output must follow this format exactly:\n\n"
              "-----------------------------------------\n"
              "Fixes & Improvements\n"
              "We have implemented several enhancements:\n\n"
              "• [Enhancement or fix description]\n"
              "• [Another improvement]\n"
              "• ...\n\n"
              f"Version: {version}\n"
              f"Available: {today}, Updated: {today}\n"
              "-----------------------------------------\n"
          )

          # Call OpenAI API
          ai_headers = {
              "Content-Type": "application/json",
              "Authorization": f"Bearer {openai_key}"
          }
          openai_response = requests.post(
              "https://api.openai.com/v1/chat/completions",
              headers=ai_headers,
              json={
                  "model": "gpt-4o-mini",
                  "messages": [{"role": "user", "content": summary_prompt}],
                  "temperature": 0.5
              }
          )
          openai_response.raise_for_status()
          summary = openai_response.json()['choices'][0]['message']['content'].strip()

          # Post the summary as a PR comment
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          comment_response = requests.post(
              comment_url,
              headers=headers,
              json={"body": f"**AI Pull Request Summary:**\n{summary}"}
          )
          comment_response.raise_for_status()

          print("PR Summary posted successfully.")
          EOF

  code_review:
    if: github.event_name == 'pull_request'
    name: AI Code Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md for Context
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "::set-output name=README::$README_CONTENT"

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4o-mini"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ steps.read_readme_review.outputs.README }}
