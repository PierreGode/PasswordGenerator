name: Windows Package Build and Cert-Signing

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Ensures all history and tags are fetched

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    # Insert your existing setup, build, sign, and artifact upload steps here...

    - name: Upload Signed Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: signed-windows-executable
        path: dist/*.exe

    - name: Determine Next Version
      run: |
        $ErrorActionPreference = 'Stop' # Make sure any error halts the script
        
        # Initialize the default version tag
        $currentVersionTag = "v0.0.0"

        # Attempt to get the current version tag
        try {
          $gitDescribeOutput = git describe --tags --abbrev=0
          if (-not [string]::IsNullOrEmpty($gitDescribeOutput)) {
            $currentVersionTag = $gitDescribeOutput
          }
        } catch {
          Write-Output "No existing tags found. Starting from default version."
        }
        
        # Ensure the version string is properly formatted
        if (-not [string]::IsNullOrEmpty($currentVersionTag) -and -not $currentVersionTag.StartsWith('v')) {
          $currentVersionTag = 'v0.0.0'
        }

        $versionNumbers = $currentVersionTag.TrimStart('v') -split '\.' | ForEach-Object { [int]$_ }
        
        # Increment the patch version
        $versionNumbers[2]++
        
        $newVersion = "v" + ($versionNumbers -join '.')
        
        echo "New version: $newVersion"
        echo "VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: pwsh

    - name: Configure Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
      shell: pwsh

    - name: Create and Push Tag
      run: |
        $tagName = "${{ env.VERSION }}"
        git tag $tagName
        git push origin $tagName
      shell: pwsh
      env:
        VERSION: ${{ env.VERSION }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/PasswordGenerator.exe
        asset_name: PasswordGenerator-${{ env.VERSION }}.exe
        asset_content_type: application/octet-stream