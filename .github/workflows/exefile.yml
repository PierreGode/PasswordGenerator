name: Windows Package Build and Cert-Signing

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important for version tags

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    # Your existing steps here ...

    - name: Upload Signed Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: signed-windows-executable
        path: dist/*.exe
    
    - name: Determine Next Version
      id: versioning
      run: |
        # Example: Increment patch version. For real projects, you might use a script to analyze commits and decide version.
        echo "VERSION=$(git describe --tags --abbrev=0 | sed 's/v\([0-9]*\.[0-9]*\.\)\([0-9]*\)/echo v\1$((\2+1))/e')" >> $GITHUB_ENV
      shell: bash

    - name: Create and Push Tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag ${{ env.VERSION }}
        git push origin ${{ env.VERSION }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/PasswordGenerator.exe
        asset_name: PasswordGenerator-${{ env.VERSION }}.exe
        asset_content_type: application/octet-stream
