name: Build, Sign, and Release Executable

on:
  push:
    branches: 
      - main

permissions:
  contents: write

jobs:
  build-sign-and-release:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest wheel pyinstaller
        if (Test-Path -Path "requirements.txt") { pip install -r requirements.txt }
      shell: pwsh

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Build executable with PyInstaller
      run: pyinstaller --onefile --windowed PasswordGenerator.py
    
    - name: Decode Signing Certificate
      run: |
        $base64Cert = "${{ secrets.CODE_SIGNING_CERT_BASE64 }}"
        $certBytes = [System.Convert]::FromBase64String($base64Cert)
        [IO.File]::WriteAllBytes("$env:TEMP\code-signing-cert.pfx", $certBytes)
      shell: pwsh

    - name: Sign the Executable
      run: |
        $signToolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe"
        $certPath = "$env:TEMP\code-signing-cert.pfx"
        $password = "${{ secrets.CERT_PASSWORD }}"
        $exePath = ".\dist\PasswordGenerator.exe"
        & $signToolPath sign /f $certPath /p $password /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a $exePath
      shell: pwsh

    - name: Generate Version Tag from Date
      run: |
        $dateTag = "v" + (Get-Date -Format "yyyy.MM.dd")
        echo "VERSION_TAG=$dateTag" >> $GITHUB_ENV
      shell: pwsh

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION_TAG }}
        release_name: Release ${{ env.VERSION_TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/PasswordGenerator.exe
        asset_name: PasswordGenerator-${{ env.VERSION_TAG }}.exe
        asset_content_type: application/octet-stream